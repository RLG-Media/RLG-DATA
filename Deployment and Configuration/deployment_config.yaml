version: '3.8'

services:
  rlg_backend:
    container_name: rlg_backend
    build:
      context: ./backend
      dockerfile: Dockerfile.data
    image: "rlg_data:latest"
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - ./backend:/app
    depends_on:
      - database
      - redis
    restart: always
    networks:
      - rlg_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3

  rlg_frontend:
    container_name: rlg_frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: "rlg_fans:latest"
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
    depends_on:
      - rlg_backend
    restart: always
    networks:
      - rlg_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3

  api_gateway:
    container_name: rlg_api_gateway
    build:
      context: ./gateway
      dockerfile: Dockerfile.gateway
    image: "rlg_gateway:latest"
    ports:
      - "80:80"
    env_file:
      - .env
    depends_on:
      - rlg_backend
      - rlg_frontend
    restart: always
    networks:
      - rlg_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3

  database:
    container_name: rlg_database
    image: postgres:13
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - rlg_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3

  redis:
    container_name: rlg_redis
    image: redis:6
    ports:
      - "6379:6379"
    networks:
      - rlg_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3

  rlg_scraper:
    container_name: rlg_scraper
    build:
      context: ./scraper
      dockerfile: Dockerfile
    image: "rlg_scraper:latest"
    volumes:
      - ./scraper:/app
    environment:
      - TWITTER_API_KEY=${TWITTER_API_KEY}
      - TWITTER_API_SECRET=${TWITTER_API_SECRET}
      - TWITTER_ACCESS_TOKEN=${TWITTER_ACCESS_TOKEN}
      - TWITTER_ACCESS_TOKEN_SECRET=${TWITTER_ACCESS_TOKEN_SECRET}
      - FACEBOOK_ACCESS_TOKEN=${FACEBOOK_ACCESS_TOKEN}
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - kafka
      - redis
    networks:
      - rlg_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        max_attempts: 3

  rlg_compliance:
    container_name: rlg_compliance
    build:
      context: ./compliance
      dockerfile: Dockerfile
    image: "rlg_compliance:latest"
    volumes:
      - ./compliance:/app
    depends_on:
      - rlg_backend
    networks:
      - rlg_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        max_attempts: 3

  rlg_super_tool:
    container_name: rlg_super_tool
    build:
      context: ./super_tool
      dockerfile: Dockerfile
    image: "rlg_super_tool:latest"
    volumes:
      - ./super_tool:/app
    depends_on:
      - rlg_backend
      - rlg_scraper
      - rlg_compliance
    networks:
      - rlg_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        max_attempts: 3

  data_processing:
    container_name: rlg_data_processing
    build:
      context: ./data_processing
      dockerfile: Dockerfile
    image: "rlg_data_processing:latest"
    environment:
      - KAFKA_BROKER=kafka:9092
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - kafka
      - redis
    volumes:
      - ./data_processing:/app
    networks:
      - rlg_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        max_attempts: 3

  task_scheduler:
    container_name: rlg_task_scheduler
    build:
      context: ./task_scheduler
      dockerfile: Dockerfile
    image: "rlg_task_scheduler:latest"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
      - rlg_backend
      - rlg_frontend
    volumes:
      - ./task_scheduler:/app
    networks:
      - rlg_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3

  kafka:
    container_name: rlg_kafka
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    networks:
      - rlg_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3

  zookeeper:
    container_name: rlg_zookeeper
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
    networks:
      - rlg_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3

  monitoring:
    container_name: rlg_monitoring
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - rlg_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3

  grafana:
    container_name: rlg_grafana
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    depends_on:
      - monitoring
    networks:
      - rlg_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3

volumes:
  db_data:
  db_fans_volume:

networks:
  rlg_network:
    driver: bridge
