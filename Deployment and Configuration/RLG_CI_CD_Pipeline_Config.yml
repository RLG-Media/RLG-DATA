name: RLG AI-Powered CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  APP_NAME: RLG Data & RLG Fans
  NODE_VERSION: "18.x"
  PYTHON_VERSION: "3.10"
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/rlgdata/rlg-backend
  DEPLOY_ENV: production
  K8S_NAMESPACE: rlg-production
  AWS_REGION: "us-east-1"
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  build:
    name: 🏗️ Build & AI-Optimized Testing
    runs-on: ubuntu-latest

    steps:
      - name: 🛠 Checkout Repository
        uses: actions/checkout@v3

      - name: ⚡ Setup Node.js & Install Dependencies
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: ⚙️ Setup Python & Install Dependencies
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🤖 AI-Powered Code Review & Linting
        run: |
          pylint --fail-under=8 rlg_backend/
          black --check rlg_backend/

      - name: 🔬 Run AI-Optimized Tests
        run: |
          pytest --cov=rlg_backend

      - name: 🔍 Security Scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          ignore-unfixed: true

  docker-build:
    name: 🏗️ Build & Push AI-Optimized Docker Image
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 🛠 Checkout Repository
        uses: actions/checkout@v3

      - name: 🔐 Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: 📦 Build AI-Optimized Docker Image
        run: |
          docker build --build-arg CACHEBUST=$(date +%s) -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.IMAGE_NAME }}:latest

      - name: 🚀 Push Docker Image
        run: |
          docker push ${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.IMAGE_NAME }}:latest

  deploy:
    name: 🚀 AI-Optimized Deployment to Multi-Cloud
    needs: docker-build
    runs-on: ubuntu-latest
    steps:
      - name: 🛠 Checkout Repository
        uses: actions/checkout@v3

      - name: 🔑 Set Up Kubernetes
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: ⛵ Deploy to Production with AI-Based Traffic Control
        run: |
          kubectl config set-cluster rlg-cluster
          kubectl apply -f k8s/deployment.yaml
          kubectl rollout restart deployment/rlg-backend -n ${{ env.K8S_NAMESPACE }}

      - name: 🔄 Enable AI-Powered Canary Deployment
        run: |
          kubectl set image deployment/rlg-backend rlg-backend=${{ env.IMAGE_NAME }}:${{ github.sha }} -n ${{ env.K8S_NAMESPACE }}
          kubectl rollout pause deployment/rlg-backend -n ${{ env.K8S_NAMESPACE }}
          kubectl rollout status deployment/rlg-backend -n ${{ env.K8S_NAMESPACE }}
          kubectl rollout resume deployment/rlg-backend -n ${{ env.K8S_NAMESPACE }}

  monitoring:
    name: 📊 AI-Powered Monitoring & Alerts
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: 🔍 AI-Driven Anomaly Detection in Logs
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"🚀 AI-Based Anomaly Detection Triggered for RLG Data & RLG Fans!"}' \
          ${{ env.SLACK_WEBHOOK_URL }}

      - name: 📈 Deploy AI-Based Auto-Scaling
        run: |
          kubectl autoscale deployment rlg-backend --cpu-percent=50 --min=2 --max=10 -n ${{ env.K8S_NAMESPACE }}

  notify:
    name: 📢 Notify Team of AI-Based Deployment Insights
    needs: monitoring
    runs-on: ubuntu-latest
    steps:
      - name: 🔔 Send Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"🚀 AI-Powered Deployment Completed: ${{ job.status }}"}' \
          ${{ env.SLACK_WEBHOOK_URL }}
