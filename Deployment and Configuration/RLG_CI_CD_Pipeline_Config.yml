name: RLG AI-Powered CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  APP_NAME: "RLG Data & RLG Fans"
  NODE_VERSION: "18.x"
  PYTHON_VERSION: "3.10"
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/rlgdata/rlg-backend
  DEPLOY_ENV: production
  K8S_NAMESPACE: rlg-production
  AWS_REGION: "us-east-1"
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  build:
    name: 🏗️ Build, Lint & AI-Optimized Tests
    runs-on: ubuntu-latest

    steps:
      - name: 🛠 Checkout Code
        uses: actions/checkout@v3

      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: ⚙️ Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Backend & Frontend Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          cd frontend && npm install && cd ..

      - name: 🤖 Lint, Format & Enforce AI-Powered Standards
        run: |
          black --check backend/
          pylint --fail-under=8 backend/

      - name: 🔬 Run AI-Powered Tests
        run: |
          pytest --cov=backend/

      - name: 🔐 Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          ignore-unfixed: true
          severity: CRITICAL,HIGH

  docker-build:
    name: 🐳 Build & Push AI-Optimized Docker Image
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: 🛠 Checkout Code
        uses: actions/checkout@v3

      - name: 🔐 Login to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: 🧱 Build Docker Image
        run: |
          docker build --build-arg CACHEBUST=$(date +%s) -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.IMAGE_NAME }}:latest

      - name: 🚀 Push Docker Image
        run: |
          docker push ${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.IMAGE_NAME }}:latest

  swagger:
    name: 📚 Generate Swagger API Docs
    runs-on: ubuntu-latest
    steps:
      - name: 📦 Install Swagger Tools
        run: |
          pip install drf-yasg

      - name: 🧾 Generate OpenAPI Spec
        run: |
          python backend/manage.py generateschema > backend/static/swagger/openapi-schema.yml

      - name: ☁ Upload OpenAPI Spec
        uses: actions/upload-artifact@v3
        with:
          name: swagger-docs
          path: backend/static/swagger/openapi-schema.yml

  deploy:
    name: 🚀 Multi-Cloud Deployment with AI Traffic Control
    needs: [docker-build, swagger]
    runs-on: ubuntu-latest

    steps:
      - name: 🛠 Checkout Code
        uses: actions/checkout@v3

      - name: ☸️ Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: latest

      - name: ⛵ Deploy to K8s Cluster
        run: |
          kubectl config set-cluster rlg-cluster
          kubectl apply -f k8s/deployment.yaml
          kubectl rollout restart deployment/rlg-backend -n ${{ env.K8S_NAMESPACE }}

      - name: 🔄 Canary Deployments & Health Checks
        run: |
          kubectl set image deployment/rlg-backend rlg-backend=${{ env.IMAGE_NAME }}:${{ github.sha }} -n ${{ env.K8S_NAMESPACE }}
          kubectl rollout pause deployment/rlg-backend -n ${{ env.K8S_NAMESPACE }}
          kubectl rollout status deployment/rlg-backend -n ${{ env.K8S_NAMESPACE }}
          kubectl rollout resume deployment/rlg-backend -n ${{ env.K8S_NAMESPACE }}

  monitoring:
    name: 📊 AI Monitoring, Anomaly Detection & Scaling
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - name: 🧠 Anomaly Detection Alert
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"🚨 AI Anomaly Detected in RLG Services. Investigating..."}' \
          ${{ env.SLACK_WEBHOOK_URL }}

      - name: 📈 Enable Autoscaling
        run: |
          kubectl autoscale deployment rlg-backend --cpu-percent=50 --min=2 --max=10 -n ${{ env.K8S_NAMESPACE }}

  notify:
    name: 📢 Final Notification & Summary
    needs: monitoring
    runs-on: ubuntu-latest

    steps:
      - name: 🔔 Slack Notification
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"✅ RLG Deployment to ${{ env.DEPLOY_ENV }} completed. Status: ${{ job.status }}."}' \
          ${{ env.SLACK_WEBHOOK_URL }}
