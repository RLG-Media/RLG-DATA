apiVersion: v1
kind: Namespace
metadata:
  name: rlg-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rlg-data-app
  namespace: rlg-data
  labels:
    app: rlg-data
spec:
  replicas: 3  # Ensures high availability
  selector:
    matchLabels:
      app: rlg-data
  template:
    metadata:
      labels:
        app: rlg-data
    spec:
      containers:
        - name: rlg-data-backend
          image: rlgdata/backend:latest
          ports:
            - containerPort: 8000
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: rlg-secrets
                  key: DATABASE_URL
            - name: REGION
              value: "global"
          resources:
            requests:
              cpu: "500m"
              memory: "512Mi"
            limits:
              cpu: "1"
              memory: "1Gi"
          volumeMounts:
            - name: logs-storage
              mountPath: /app/logs
      volumes:
        - name: logs-storage
          persistentVolumeClaim:
            claimName: rlg-logs-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: rlg-data-service
  namespace: rlg-data
spec:
  selector:
    app: rlg-data
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8000
  type: LoadBalancer
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: rlg-data-hpa
  namespace: rlg-data
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: rlg-data-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 75
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rlg-logs-pvc
  namespace: rlg-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rlg-data-ingress
  namespace: rlg-data
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
    - host: rlgdata.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: rlg-data-service
                port:
                  number: 80
---
apiVersion: v1
kind: Secret
metadata:
  name: rlg-secrets
  namespace: rlg-data
type: Opaque
data:
  DATABASE_URL: bXlzcWw6Ly91c2VyOnBhc3N3b3JkQG1lbnN1YmQuZGF0YWJhc2U=
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: rlg-data-cleanup
  namespace: rlg-data
spec:
  schedule: "0 3 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: cleanup
              image: rlgdata/cleanup:latest
              command: ["sh", "-c", "rm -rf /app/logs/*.log"]
          restartPolicy: OnFailure
